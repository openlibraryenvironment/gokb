version: "2.0"

volumes:
  pgdata:
  esdata:
  virtuoso:

services:
  #
  # docker exec -it pg psql -u postgres
  #
  postgres:
    container_name: pg
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: pa55w0rd
      POSTGRES_DB: postgres
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - 5432:5432
    networks:
      default:
        aliases:
          - pghost



  #  mysql:
  #    container_name: mysql
  #    image: mariadb:latest
  #    restart: always
  #    environment:
  #      MYSQL_ROOT_PASSWORD: example
  #    volumes:
  #      - mysqldata:/var/lib/mysql

  # https://www.elastic.co/guide/en/elasticsearch/reference/5.6/docker.html
  # https://github.com/k-int/KBPlusG3/blob/dev-integration/SETUP-ES-DOCKER.txt
  # see https://www.elastic.co/guide/en/elasticsearch/reference/5.6/docker.html
  es5:
    container_name: es5
    image: docker.elastic.co/elasticsearch/elasticsearch:5.6.10
    restart: always
    environment:
      - xpack.security.enabled=false
      - xpack.monitoring.enabled=false
      - xpack.ml.enabled=false
      - xpack.graph.enabled=false
      - xpack.watcher.enabled=false
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=-Xms512m -Xmx1g
      - discovery.zen.minimum_master_nodes=1
      - discovery.type=single-node
      - cluster.name=elasticsearch
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: 1g
    ports:
      - 9200:9200
      - 9300:9300
    volumes:
      - esdata:/usr/share/elasticsearch/data
    networks:
      default:
        aliases:
          - eshost


  # Converted from
  # docker run -d --restart always --hostname rabbitmq -p 15672:15672 -p 5672:5672 --name rabbitmq -e RABBITMQ_DEFAULT_USER=adm -e RABBITMQ_DEFAULT_PASS=admpass rabbitmq:management
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:management
    restart: always
    ports:
      - 15672:15672
      - 5672:5672
    environment:
      - RABBITMQ_DEFAULT_USER=adm
      - RABBITMQ_DEFAULT_PASS=admpass

  # https://github.com/tenforce/docker-virtuoso  (7.2.4 is latest)
  virtuoso:
    container_name: virtuoso
    image: tenforce/virtuoso:1.3.1-virtuoso7.2.4
    environment:
      DBA_PASSWORD: virtpass
      SPARQL_UPDATE: "true"
      DEFAULT_GRAPH: "http://www.example.com/my-graph"
    volumes:
      - virtuoso:/data
    ports:
      - "8890:8890"

#  adminer:
#    image: adminer
#    restart: always
#    ports:
#      - 8080:8080
# https://github.com/gilyes/docker-nginx-letsencrypt-sample/blob/master/docker-compose.yml
# This looks really helpful: https://devsidestory.com/lets-encrypt-with-docker/
#
#  nginx:
#    restart: always
#    image: nginx
#    container_name: nginx
#    ports:
#      - "80:80"
#      - "443:443"
#    volumes:
#      - "./volumes/nginx_conf:/etc/nginx/conf.d"
#      - "./volumes/nginx_vhost:/etc/nginx/vhost.d"
#      - "./volumes/nginx_certs:/etc/nginx/certs"
#      - "./volumes/www:/var/www/letsencrypt"
#

  nginx-proxy:
    image: jwilder/nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/etc/nginx/vhost.d"
      - "/usr/share/nginx/html"
      - "/var/run/docker.sock:/tmp/docker.sock:ro"
      - "/etc/nginx/certs"

  letsencrypt-nginx-proxy-companion:
    image: jrcs/letsencrypt-nginx-proxy-companion
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    volumes_from:
      - "nginx-proxy"

  gokb:
    container_name: gokb
    image: knowint/gokbg3:latest
    depends_on:
      - "postgres"
      - "es5"
      - "nginx-proxy"
      - "virtuoso"
    environment:
      GOKB_ES_CLUSTER: "elasticsearch"
      GOKB_DB: "jdbc:postgresql://pghost:5432/gokbg3"
      GOKB_DB_USER: "knowint"
      GOKB_DB_PASS: "knowint"
    ports:
      - "8091:8080" # Export container 8080 as 8091 locally




import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
        classpath 'com.bertramlabs.plugins:asset-pipeline-gradle:4.1.0'
        classpath "com.bmuschko:gradle-docker-plugin:6.7.0"
        classpath "com.gorylenko.gradle-git-properties:gradle-git-properties:2.4.1"
        classpath "gradle.plugin.com.github.erdi.webdriver-binaries:webdriver-binaries-gradle-plugin:2.7"
        classpath "org.grails.plugins:database-migration:4.1.0"
        // Fixing too long classpath in Windows development environment
        classpath "gradle.plugin.ua.eshepelyuk:ManifestClasspath:1.0.0"
        classpath 'org.quartz-scheduler:quartz:2.3.2'
    }
}

version appVersion
group "gokb"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"asset-pipeline"
apply plugin:"com.gorylenko.gradle-git-properties"
apply plugin:"com.github.erdi.webdriver-binaries"
apply plugin:"org.grails.grails-web"
apply plugin:"org.grails.grails-gsp"
apply plugin:"com.bmuschko.docker-remote-api"
apply plugin:"org.grails.grails-doc"
// Fixing too long classpath in Windows development environment
apply plugin: "ua.eshepelyuk.ManifestClasspath"

allprojects {
    repositories {
        mavenCentral()
        maven { url "https://repo.grails.org/grails/core" }
    }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

configurations {
    all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.name in ['asset-pipeline-core', 'asset-pipeline-grails']) {
                // override dependency from org.grails.plugins:cache
                details.useVersion '4.1.0' // upgrade from 3.x
            }
        }
    }
}

dependencies {
    developmentOnly "org.springframework.boot:spring-boot-devtools"
    developmentOnly "org.springframework.boot:spring-boot-starter-tomcat"

    implementation "org.codehaus.groovy:groovy-dateutil:3.0.13"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-autoconfigure"
    implementation "org.grails:grails-core"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.grails:grails-web-boot"
    implementation "org.grails:grails-logging"
    implementation "org.grails:grails-plugin-rest"
    implementation "org.grails:grails-plugin-databinding"
    implementation "org.grails:grails-plugin-i18n"
    implementation "org.grails:grails-plugin-services"
    implementation "org.grails:grails-plugin-url-mappings"
    implementation "org.grails:grails-plugin-interceptors"
    implementation "org.grails.plugins:async"
    implementation "org.grails.plugins:scaffolding"
    implementation "org.grails.plugins:events"
    implementation("org.quartz-scheduler:quartz:2.3.2") {
        exclude group: 'slf4j-api', module: 'c3p0'
    }
    implementation "org.grails.plugins:quartz:2.0.13"
    implementation "org.grails.plugins:hibernate5"
    implementation "org.hibernate:hibernate-core:5.6.14.Final"
    implementation 'org.hibernate:hibernate-ehcache:5.6.14.Final'
    implementation 'net.sf.ehcache:ehcache:2.10.9.2'
    implementation "org.grails.plugins:gsp"
    implementation "org.grails.plugins:mail:3.0.0"
    // implementation 'org.grails.plugins:greenmail:2.0.0.RC2'
    implementation 'org.grails.plugins:database-migration:4.1.0', {
        exclude module: 'spring-boot-cli'
    }

    // implementation 'org.grails.plugins:grails-melody-plugin:1.80.0'

    implementation 'org.grails.plugins:spring-security-core:5.1.1'
    implementation 'org.grails.plugins:spring-security-acl:4.0.0.M2'
    implementation 'org.grails.plugins:spring-security-ui:4.0.0.M1'
    implementation 'org.grails.plugins:spring-security-rest:3.0.1'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.70'
    implementation 'com.google.guava:guava:31.1-jre'
    implementation 'commons-fileupload:commons-fileupload:1.5'
    implementation 'org.pac4j:pac4j-core:5.7.0'

    implementation 'org.apache.httpcomponents:httpcore:4.4.14'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'org.apache.commons:commons-compress:1.21'
    implementation 'commons-validator:commons-validator:1.7'
    implementation 'com.opencsv:opencsv:5.6'
    implementation 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
    implementation 'com.github.ladutsko:isbn-core:1.1.0'
    implementation 'joda-time:joda-time:2.10.14'
    implementation 'org.opensearch:opensearch:2.4.1'
    implementation 'org.opensearch.client:opensearch-rest-high-level-client:2.4.1'
    implementation 'org.locationtech.spatial4j:spatial4j:0.8'
    implementation 'org.slf4j:log4j-over-slf4j:2.0.3'
    implementation 'org.apache.tika:tika-core:2.4.1'
    implementation 'dk.glasius:external-config:3.1.1'

    assets 'com.bertramlabs.plugins:less-asset-pipeline:4.1.0'

    implementation "io.micronaut:micronaut-http-client"
    implementation 'io.micronaut.xml:micronaut-jackson-xml:3.2.0'
    implementation 'com.github.albfernandez:juniversalchardet:2.4.0'
    implementation 'org.postgresql:postgresql:42.5.1'
    runtimeOnly "com.h2database:h2"
    runtimeOnly "org.apache.tomcat:tomcat-jdbc"

    testImplementation "org.springframework.boot:spring-boot-starter-tomcat"
    testImplementation "org.grails:grails-gorm-testing-support"
    testImplementation "org.grails:grails-web-testing-support"
    testImplementation "org.grails.plugins:geb"
    testRuntimeOnly "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    testRuntimeOnly "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"

    testImplementation "org.seleniumhq.selenium:selenium-remote-driver:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-api:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-support:$seleniumVersion"
}

bootRun {
    systemProperties System.properties
    jvmArgs = ['-Dspring.output.ansi.enabled=always','-Xmx4g']
    sourceResources sourceSets.main
}

buildProperties.doLast {
    // Find the right file

    File grailsBuildInfoFile = (File)it.outputs.files.files.find { it.name == 'grails.build.info' }
    File grailsGitInfoFile = file("$buildDir/resources/main/git.properties")
    if(!grailsBuildInfoFile) {
      println "Build file not found!"
      return // No need to continue if the file is not there
    }

    Properties properties = new Properties()
    Properties gitProperties = new Properties()
    // Read properties from the file

    grailsBuildInfoFile.withInputStream {
        properties.load(it)
    }

    if (!grailsGitInfoFile) {
      println "Git file not found!"
    }else {
      grailsGitInfoFile.withInputStream {
        gitProperties.load(it)
      }
    }

    // Add new properties from various sources
    properties.setProperty('build.time', new Date().format("yyyy-MM-dd HH:mm:ss"))
    // Get a System property
    properties.setProperty('build.java.version', System.getProperty('java.version'))
    // Get the host name where the build was created
    // properties.setProperty('build.host', InetAddress.localHost.hostName)

    if(grailsGitInfoFile) {
        properties.setProperty('build.git.revision', gitProperties.getProperty('git.commit.id.abbrev'))
        properties.setProperty('build.git.branch', gitProperties.getProperty('git.branch'))
    }
    // Write the properties back to the file
    grailsBuildInfoFile.withOutputStream {
        properties.store(it,null)
    }
}

webdriverBinaries {
    chromedriver "$chromeDriverVersion"
    geckodriver "$geckoDriverVersion"
}

sourceSets {
    main {
        resources {
            srcDir 'migrations'
        }
    }
}

tasks.withType(Test) {
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")

    useJUnitPlatform()

    testLogging {     // This is for logging and can be removed.
        events("passed", "skipped", "failed")
    }
}

assets {
    minifyJs = true
    minifyCss = true
    excludes = [
      '**/_*.less',
      'gokb/themes/*.less',
      'gokb/themes/**/*.less',
      'bootstrap/*.less',
      'bootstrap/**/*.less'
    ]
    includes = [
      'webfonts/*',
      'gokb/themes/*/theme.less',
      'bootstrap/bootstrap.less'
    ]
}

// http://guides.grails.org/grails-as-docker-container/guide/index.html
// Build docker image:: ./gradlew buildImage
// ./gradlew dockerPushImage should push the image, but it is better to use the commands below to do that
//
// list know docker images  :: docker images
// Logon to docker hub:: docker login --username=yourhubusername
// Push image to docker hub::   docker push knowint/gokbg3

ext {
    dockerTag = "knowint/${project.name}:${project.version}".toLowerCase()
    dockerBuildDir = mkdir("${buildDir}/docker")
}

task prepareDocker(type: Copy, dependsOn: assemble) {
    description = 'Copy files from src/main/docker and application jar to Docker temporal build directory'
    group = 'Docker'

    from 'src/main/docker'
    from project.war

    into dockerBuildDir
}

task createDockerfile(type: Dockerfile, dependsOn: prepareDocker) {
    description = 'Create a Dockerfile file'
    group = 'knowint'

    destFile = project.file("${dockerBuildDir}/Dockerfile")

    from 'openjdk:11-jdk-alpine'

    exposePort 8080

    workingDir '/app'

    copyFile war.archiveName, 'application.jar'
    copyFile 'app-entrypoint.sh', 'app-entrypoint.sh'
    runCommand 'chmod +x app-entrypoint.sh'

    entryPoint '/app/app-entrypoint.sh'
}

task buildImage(type: DockerBuildImage, dependsOn: createDockerfile) {
    description = 'Create Docker image to run the Grails application'
    group = 'knowint'

    inputDir = file(dockerBuildDir)
}
